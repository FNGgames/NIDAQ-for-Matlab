function cfg = NI_ConfigureSession()
% Opens a dialog to configure the NIDAQ session. Saves the result as a 
% struct for use with the other NI functions. Also saves the last-used
% settings to a file so they appear again the next time NIDAQ is used.
    cfgFileName = [StripPath(mfilename('fullpath'), 1) '\settings.cfg'];
    
    if exist(cfgFileName, 'file')        
        settings = ImportSettingsFile(cfgFileName);
        settings = settings(:,2)';
    else
        settings = {'Data Log', '10000', '60', '1'};
    end

    dialog = inputdlg ( ...
        {'Log Name', ... 
        'Sampling Frequency (Hz)', ...
        'Recording Duration (s) (0=indefinite)', ...
        'Data Preview Mode'}, ...
        'Configure DAQ Session', 1, ...
        settings);
    
    name = dialog{1};
    dialog = str2double(dialog(2:end));
    sr = dialog(1);
    dur = dialog(2);
    pre = dialog(3);
    
    cfg = struct('SampleRate', sr, ...
        'Duration', dur, ...
        'PreviewMode', pre, ...
        'LogName', name);  
    
    fid = fopen(cfgFileName, 'w+');
    fprintf(fid, 'Name\t%s\r\nFs\t%d\r\nDur\t%d\r\nPrev\t%d', ...
        name, sr, dur, pre ); 
    fclose(fid);
    
    % matlab auto-generated importer
    function cfg = ImportSettingsFile(filename, startRow, endRow)
    %IMPORTFILE Import numeric data from a text file as a matrix.
    %   SETTINGS1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
    %   the default selection.
    %
    %   SETTINGS1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
    %   STARTROW through ENDROW of text file FILENAME.
    %
    % Example:
    %   settings1 = importfile('settings.cfg', 2, 4);
    %
    %    See also TEXTSCAN.

    % Auto-generated by MATLAB on 2017/01/23 15:07:51

    %% Initialize variables.
    delimiter = '\t';
    if nargin<=2
        startRow = 1;
        endRow = inf;
    end

    %% Read columns of data as text:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%s%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to the format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end

    %% Close the text file.
    fclose(fileID);

    %% Convert the contents of columns containing numeric text to numbers.
    % Replace non-numeric text with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = dataArray{col};
    end

    %% Create output variable
    cfg = raw;

    end

end

